This is the api key from Nomics
	API key: d04088a8034acc4bfa8a059cb64eb4a992bb9123

This is the api key from MarketCoinCap
    API key: 5eb1bd46-b52c-4804-8350-71db80fecb34





This is the script for alpha vantage
import requests
import pandas as pd

def get_crypto_price(symbol, exchange, start_date = None):
    api_key = 'YOUR API KEY'
    api_url = f'https://www.alphavantage.co/query?function=DIGITAL_CURRENCY_DAILY&symbol={symbol}&market={exchange}&apikey={api_key}'
    raw_df = requests.get(api_url).json()
    df = pd.DataFrame(raw_df['Time Series (Digital Currency Daily)']).T
    df = df.rename(columns = {'1a. open (USD)': 'open', '2a. high (USD)': 'high', '3a. low (USD)': 'low', '4a. close (USD)': 'close', '5. volume': 'volume'})
    for i in df.columns:
        df[i] = df[i].astype(float)
    df.index = pd.to_datetime(df.index)
    df = df.iloc[::-1].drop(['1b. open (USD)', '2b. high (USD)', '3b. low (USD)', '4b. close (USD)', '6. market cap (USD)'], axis = 1)
    if start_date:
        df = df[df.index >= start_date]
    return df

btc = get_crypto_price(symbol = 'BTC', exchange = 'USD', start_date = '2020-01-01')
btc



This is the script for pabdas datareader
#!pip install pandas_datareader
import pandas_datareader as web
import datetime as dt

start = dt.datetime(2020,1,1)
end = dt.datetime.now()

ltc = web.DataReader('LTC-USD', 'yahoo', start, end)
ltc





This is  the script for YFinance
#!pip install yfinance
import yfinance as yf
import datetime as dt

start = dt.datetime(2020,1,1)
end = dt.datetime.now()

eth = yf.download('ETH', start, end)
eth



This is the script for cryptocompare
import requests
import pandas as pd

def get_crypto_price(symbol, exchange, days):
    api_key = 'YOUR API KEY'
    api_url = f'https://min-api.cryptocompare.com/data/v2/histoday?fsym={symbol}&tsym={exchange}&limit={days}&api_key={api_key}'
    raw = requests.get(api_url).json()
    df = pd.DataFrame(raw['Data']['Data'])[['time', 'high', 'low', 'open']].set_index('time')
    df.index = pd.to_datetime(df.index, unit = 's')
    return df

ada = get_crypto_price('ADA', 'USD', 365)
ada




This is the script for Fastquant
#!pip install fastquant
import fastquant as fq

start = '2020-01-01'
end = '2021-03-27'

dot = fq.get_crypto_data('DOT/USDT', start, end)
dot


This is the script for Twelve Data
import requests
import pandas as pd

def get_crypto_price(symbol, interval, days):
    api_key = 'YOUR API KEY'
    api_url = f'https://api.twelvedata.com/time_series?symbol={symbol}&exchange=Binance&interval={interval}&outputsize={days}&apikey={api_key}'
    raw = requests.get(api_url).json()
    df = pd.DataFrame(raw['values']).set_index('datetime')
    df = df.iloc[::-1]
    return df

xrp = get_crypto_price('XRP/USD', '1day', 450)
xrp



This is the script for polygon.io for web scraping
import requests
import pandas as pd

def get_crypto_prices(symbol, start, end):
    api_key = 'YOUR API KEY'
    api_url = f'https://api.polygon.io/v2/aggs/ticker/X:{symbol}USD/range/1/day/{start}/{end}?unadjusted=true&sort=asc&apiKey={api_key}'
    raw = requests.get(api_url).json()
    df = pd.DataFrame(raw['results']).set_index('t')[['o', 'h', 'l', 'c', 'v']]
    df = df.rename(columns = {'o':'open', 'h':'high', 'l':'low', 'c':'close', 'v':'volume'})
    df.index = pd.to_datetime(df.index, unit = 'ms')
    return df

bch = get_crypto_prices('BCH', '2020-01-01', '2021-04-26')
bch


This is the script for coinlayer
import requests
import pandas as pd

def get_crypto_prices(symbol, start, end):
    api_key = 'YOUR API KEY'
    series = pd.date_range(start, end)
    dates = []
    for i in range(len(series)):
        dates.append(str(series[i]))
    date_series = []
    for i in dates:
        date_series.append(i[:10])
    prices = []
    for date in date_series:
        try:
            api_url = f'http://api.coinlayer.com/{date}&symbols={symbol}?access_key={api_key}'
            raw = requests.get(api_url).json()
            val = []
            val.append(raw['rates'])
            price = val[0][f'{symbol}']
            prices.append(price)
        except:
            prices.append('NaN')
    df = pd.DataFrame(columns = ['date', 'price'])
    df['date'] = series
    df['price'] = prices
    return df

bch = get_crypto_prices('BCH', '2021-01-01', '2021-04-27')
bch



This is the script for Messari
import requests
import pandas as pd

def get_crypto_price(symbol, start, end):
    api_url = f'https://data.messari.io/api/v1/markets/binance-{symbol}-usdt/metrics/price/time-series?start={start}&end={end}&interval=1d'
    raw = requests.get(api_url).json()
    df = pd.DataFrame(raw['data']['values'])
    df = df.rename(columns = {0:'date',1:'open',2:'high',3:'low',4:'close',5:'volume'})
    df['date'] = pd.to_datetime(df['date'], unit = 'ms')
    df = df.set_index('date')
    return df

xmr = get_crypto_price('xmr', '2020-01-01', '2021-04-27')
xmr




This is the cript for IEX Cloud
import requests
import pandas as pd

def get_crypto_price(symbol):
    api_key = 'YOUR API KEY'
    api_url = f'https://cloud.iexapis.com/stable/crypto/{symbol}/price?token={api_key}'
    raw = requests.get(api_url).json()
    price = raw['price']
    return float(price)

btc = get_crypto_price('btcusd')
print('Price of 1 Bitcoin: {} USD'.format(btc))



